#visualize all residency programs
#MISSING PROGRAM WEBSITES: NMCP - Otolaryngology, Urology; Travis AFB - Orthopaedic Surgery

import folium
from folium import Circle, Marker
from folium.features import DivIcon
import pandas
import branca

with open('Desktop\Military Residencies\Military Residencies - Map (all programs).csv', encoding='utf-8-sig') as data:
    df = pandas.read_csv(data)
    m_1 = folium.Map(location=[37, -119], zoom_start=3, min_zoom=3)
    for lat, lon, color, popup in zip(df['Longitude'],df['Latitude'],df['Color'],df['Popup']):
        popup_html = popup
        iframe = branca.element.IFrame(html=popup_html, width=350, height=200)
        pop_up = folium.Popup(iframe)
        folium.CircleMarker(location=[lat,lon], radius=5, popup=pop_up, color=color, fill=True, fill_opacity=1).add_to(m_1)
    
m_1

#visualize certain residency programs by speciality AND branch + additional branch-specific data 

import folium
from folium import Circle, Marker
import pandas
import branca

search_specialty = "Internal Medicine/Psychiatry" #specific syntax for OBGYN, Orthopaedic Surgery, and Anesthesiology
search_branch = "Army"


with open('Desktop\Military Residencies\Military Residencies - Map (by specialty).csv', encoding='utf-8-sig') as data:
    df = pandas.read_csv(data)
    if search_specialty != "":
        df = df[df['Specialty'].str.contains(search_specialty)]
        m_2 = folium.Map(location=[37, -119], zoom_start=3, min_zoom=3)
        if search_branch == "":
            for lat, lon, color, website, name, joint_Army, joint_AirForce, joint_Navy, AirForce_spots, Navy_spots in zip(df['Longitude'],df['Latitude'],df['Color'],df['Website'],df["Specialty"],df["Army"],df["Air Force"],df["Navy"], df["Air Force spots available (2022)"], df["Navy spots available (2022)"]):
                popup_html = "<a href=" + str(website) + ">" + name + "</a>"
                if color == "green" and joint_AirForce > 0 and joint_Navy < 1:
                    popup_html = "<a href=" + str(website) + ">" + name + "</a><br>(joint Air Force)"
                    if str(AirForce_spots) != "NaN":
                        popup_html = popup_html + "<br><br>Air Force spots available (2022): " + str(AirForce_spots)
                if color == "green" and joint_AirForce > 0 and joint_Navy > 0:
                    popup_html = "<a href=" + str(website) + ">" + name + "</a><br>(joint Air Force and Navy)"
                    if str(AirForce_spots) != "NaN" and str(Navy_spots) != "NaN":
                        popup_html = popup_html + "<br><br>Air Force spots available (2022): " + str(AirForce_spots) + "<br><br>Navy spots available (2022): " + str(Navy_spots)
                if color == "green" and joint_AirForce < 1 and joint_Navy > 0:
                    popup_html = "<a href=" + str(website) + ">" + name + "</a><br>(joint Navy)"
                    if str(Navy_spots) != "NaN":
                        popup_html = popup_html + "<br><br>Navy spots available (2022):" + str(Navy_spots)
                if color == "blue":
                    if str(AirForce_spots) != "NaN":
                        popup_html = popup_html + "<br><br>Air Force spots available (2022): " + str(AirForce_spots)
                if color == "yellow" and joint_AirForce > 0:
                    popup_html = "<a href=" + str(website) + ">" + name + "</a><br>(joint Air Force)"
                    if str(AirForce_spots) != "NaN" and str(Navy_spots) != "NaN":
                        popup_html = popup_html + "<br><br>Air Force spots available (2022): " + str(AirForce_spots) + "<br><br>Navy spots available (2022): " + str(Navy_spots)
                if color == "yellow" and joint_AirForce < 1:
                    popup_html = "<a href=" + str(website) + ">" + name + "</a><br><br>Navy spots available (2022): " + str(Navy_spots)
                iframe = branca.element.IFrame(html=popup_html, width=300, height=150)
                pop_up = folium.Popup(iframe)
                folium.CircleMarker(location=[lat,lon], radius=5, popup=pop_up, color=color, fill=True, fill_opacity=1).add_to(m_2)
        if search_branch == "Army":
            df = df[df['Army'].astype(int) > 0]
            title = search_branch + " " + search_specialty
            for lat, lon, color, website, name, joint_Army, joint_AirForce, joint_Navy in zip(df['Longitude'],df['Latitude'],df['Color'],df['Website'],df["Specialty"],df["Army"],df["Air Force"],df["Navy"]):
                popup_html = "<a href=" + str(website) + ">" + name + "</a>"
                if joint_AirForce > 0 and joint_Navy < 1:
                    popup_html = popup_html + "<br><br>(joint Air Force)"
                if joint_AirForce > 0 and joint_Navy > 0:
                    popup_html = popup_html + "<br><br>(joint Air Force and Navy)"
                if joint_AirForce < 1 and joint_Navy > 0:
                    popup_html = popup_html + "<br><br>(joint Navy)"
                iframe = branca.element.IFrame(html=popup_html, width=200, height=100)
                pop_up = folium.Popup(iframe)
                folium.CircleMarker(location=[lat,lon], radius=5, popup=pop_up, color=color, fill=True, fill_opacity=1).add_to(m_2)
            with open('Desktop\Military Residencies\Army GME data - Boards.csv', encoding='utf-8-sig') as board_data:
                    with open('Desktop\Military Residencies\Army GME data - Match Results.csv', encoding='utf-8-sig') as match_data:
                        df_boards = pandas.read_csv(board_data)
                        df_match = pandas.read_csv(match_data)
                        def full_popup_html(boards, match):
                            step=df_boards['2021 USMLE Step 2 - Mean (Range)'].iloc[boards] 
                            comlex=df_boards['2021 COMLEX Level 2 - Mean (Range)'].iloc[boards]
                            positions = df_match['Positions Offered (2021)'].iloc[match] 
                            ratio_2015=df_match['2015'].iloc[match] 
                            ratio_2016=df_match['2016'].iloc[match] 
                            ratio_2017=df_match['2017'].iloc[match] 
                            ratio_2018=df_match['2018'].iloc[match] 
                            ratio_2019=df_match['2019'].iloc[match] 
                            ratio_2020=df_match['2020'].iloc[match] 
                            ratio_2021=df_match['2021'].iloc[match] 

                            left_col_color = "#19a7bd"
                            right_col_color = "#f2f0d3"

                            html = """<!DOCTYPE html>
                        <html>

                        <head>
                        <h4 style="margin-bottom:10"; width="200px">{}</h4>""".format(title) + """

                        </head>
                            <table style="height: 126px; width: 350px;">
                        <tbody>
                        <tr>
                        <td style="background-color: """+ left_col_color +""";"><span style="color: #ffffff;">2021 USMLE Step 2 - Mean (Range)</span></td>
                        <td style="width: 150px;background-color: """+ right_col_color +""";">{}</td>""".format(step) + """
                        </tr>
                        <tr>
                        <td style="background-color: """+ left_col_color +""";"><span style="color: #ffffff;">2021 COMLEX Level 2 - Mean (Range)</span></td>
                        <td style="width: 150px;background-color: """+ right_col_color +""";">{}</td>""".format(comlex) + """
                        </tr>
                        <tr>
                        <td style="background-color: """+ left_col_color +""";"><span style="color: #ffffff;">Positions Offered (2021)</span></td>
                        <td style="width: 150px;background-color: """+ right_col_color +""";">{}</td>""".format(positions) + """
                        </tr>
                        <tr>
                        <td style="background-color: """+ left_col_color +""";"><span style="color: #ffffff;">2015 - Applicants/Positions</span></td>
                        <td style="width: 150px;background-color: """+ right_col_color +""";">{}</td>""".format(ratio_2015) + """
                        </tr>
                        <tr>
                        <td style="background-color: """+ left_col_color +""";"><span style="color: #ffffff;">2016 - Applicants/Positions</span></td>
                        <td style="width: 150px;background-color: """+ right_col_color +""";">{}</td>""".format(ratio_2016) + """
                        </tr>
                        <tr>
                        <td style="background-color: """+ left_col_color +""";"><span style="color: #ffffff;">2017 - Applicants/Positions</span></td>
                        <td style="width: 150px;background-color: """+ right_col_color +""";">{}</td>""".format(ratio_2017) + """
                        </tr>
                        <tr>
                        <td style="background-color: """+ left_col_color +""";"><span style="color: #ffffff;">2018 - Applicants/Positions</span></td>
                        <td style="width: 150px;background-color: """+ right_col_color +""";">{}</td>""".format(ratio_2018) + """
                        </tr>
                        <tr>
                        <td style="background-color: """+ left_col_color +""";"><span style="color: #ffffff;">2019 - Applicants/Positions</span></td>
                        <td style="width: 150px;background-color: """+ right_col_color +""";">{}</td>""".format(ratio_2019) + """
                        </tr>
                        <tr>
                        <td style="background-color: """+ left_col_color +""";"><span style="color: #ffffff;">2020 - Applicants/Positions</span></td>
                        <td style="width: 150px;background-color: """+ right_col_color +""";">{}</td>""".format(ratio_2020) + """
                        </tr>
                        <tr>
                        <td style="background-color: """+ left_col_color +""";"><span style="color: #ffffff;">2021 - Applicants/Positions</span></td>
                        <td style="width: 150px;background-color: """+ right_col_color +""";">{}</td>""".format(ratio_2021) + """
                        </tr>
                        </tbody>
                        </table>
                        </html>
                        """
                            return html
                        if search_specialty in df_boards.values:
                            table_html = full_popup_html(df_boards[df_boards['Specialty'] == search_specialty].index[0], df_match[df_match['Specialty'] == search_specialty].index[0])
                            table_iframe = branca.element.IFrame(html=table_html, width=375, height=375)
                            table_pop_up = folium.Popup(table_iframe)
                            folium.Marker(location=[50, -150], popup=table_pop_up).add_to(m_2)
        if search_branch == "Air Force":
            df = df[df['Air Force'].astype(int) > 0]
            for lat, lon, color, website, name, joint_Army, joint_AirForce, joint_Navy, AirForce_spots, Navy_spots in zip(df['Longitude'],df['Latitude'],df['Color'],df['Website'],df["Specialty"],df["Army"],df["Air Force"],df["Navy"], df["Air Force spots available (2022)"], df["Navy spots available (2022)"]):
                popup_html = "<a href=" + str(website) + ">" + name + "</a>"
                if joint_Army > 0 and joint_Navy < 1:
                    popup_html = popup_html + "<br>(joint Army)<br><br>Air Force spots available (2022): " + str(AirForce_spots)
                if joint_Army > 0 and joint_Navy > 0:
                    popup_html = popup_html + "<br>(joint Army and Navy)<br><br>Air Force spots available (2022): " + str(AirForce_spots)
                if joint_Army < 1 and joint_Navy > 0:
                    popup_html = popup_html + "<br>(joint Navy)<br><br>Air Force spots available (2022): " + str(AirForce_spots)
                if joint_Army < 1 and joint_Navy < 1:
                    popup_html = popup_html + "<br><br>Air Force spots available (2022): " + str(AirForce_spots)
                iframe = branca.element.IFrame(html=popup_html, width=200, height=150)
                pop_up = folium.Popup(iframe, max_width=200)
                folium.CircleMarker(location=[lat,lon], radius=5, popup=pop_up, color=color, fill=True, fill_opacity=1).add_to(m_2)
        if search_branch == "Navy":
            df = df[df['Navy'].astype(int) > 0]
            for lat, lon, color, website, name, joint_Army, joint_AirForce, joint_Navy, AirForce_spots, Navy_spots in zip(df['Longitude'],df['Latitude'],df['Color'],df['Website'],df["Specialty"],df["Army"],df["Air Force"],df["Navy"], df["Air Force spots available (2022)"], df["Navy spots available (2022)"]):
                popup_html = "<a href=" + str(website) + ">" + name + "</a>"
                if joint_Army > 0 and joint_AirForce < 1:
                    popup_html = popup_html + "<br><br>(joint Army)<br><br>Navy spots available (2022):" + str(Navy_spots)
                if joint_Army > 0 and joint_AirForce > 0:
                    popup_html = popup_html + "<br><br>(joint Army and Air Force)<br><br>Navy spots available (2022):" + str(Navy_spots)
                if joint_Army < 1 and joint_AirForce > 0:
                    popup_html = popup_html + "<br><br>(joint Air Force)<br><br>Navy spots available (2022):" + str(Navy_spots)
                if joint_Army < 1 and joint_AirForce < 1:
                    popup_html = popup_html + "<br><br>Navy spots available (2022): " + str(Navy_spots)
                iframe = branca.element.IFrame(html=popup_html, width=200, height=150)
                pop_up = folium.Popup(iframe, max_width=200)
                folium.CircleMarker(location=[lat,lon], radius=5, popup=pop_up, color=color, fill=True, fill_opacity=1).add_to(m_2)
    if search_specialty == "":
        with open('Desktop\Military Residencies\Military Residencies - Map (all programs).csv', encoding='utf-8-sig') as data:
            df = pandas.read_csv(data)
            m_2 = folium.Map(location=[37, -119], zoom_start=3, min_zoom=3)
            if search_branch == "Army":
                df = df[df['Color'].str.contains("green")]
                for lat, lon, color, popup in zip(df['Longitude'],df['Latitude'],df['Color'],df['Popup']):
                    popup_html = popup
                    iframe = branca.element.IFrame(html=popup_html, width=200, height=200)
                    pop_up = folium.Popup(iframe, max_width=200)
                    folium.CircleMarker(location=[lat,lon], radius=5, popup=pop_up, color=color, fill=True, fill_opacity=1).add_to(m_2)
            if search_branch == "Air Force":
                df = df[df['Color'].str.contains("blue")]
                for lat, lon, color, popup in zip(df['Longitude'],df['Latitude'],df['Color'],df['Popup']):
                    popup_html = popup
                    iframe = branca.element.IFrame(html=popup_html, width=200, height=200)
                    pop_up = folium.Popup(iframe, max_width=200)
                    folium.CircleMarker(location=[lat,lon], radius=5, popup=pop_up, color=color, fill=True, fill_opacity=1).add_to(m_2)
            if search_branch == "Navy":
                df = df[df['Color'].str.contains("yellow")]
                for lat, lon, color, popup in zip(df['Longitude'],df['Latitude'],df['Color'],df['Popup']):
                    popup_html = popup
                    iframe = branca.element.IFrame(html=popup_html, width=200, height=200)
                    pop_up = folium.Popup(iframe, max_width=200)
                    folium.CircleMarker(location=[lat,lon], radius=5, popup=pop_up, color=color, fill=True, fill_opacity=1).add_to(m_2)
        
m_2
